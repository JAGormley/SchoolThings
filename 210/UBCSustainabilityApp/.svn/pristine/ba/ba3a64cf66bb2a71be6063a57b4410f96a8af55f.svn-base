package ubc.cs.cpsc210.sustainabilityapp.webservices;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.HttpContext;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;

import android.util.Log;

import ubc.cs.cpsc210.sustainabilityapp.model.LatLong;

/**
 * Wrapper around a service which calculates routes between geographic locations.  This class may 
 * be called concurrently from multiple threads -- it is thread-safe.
 * 
 * Currently, this class wraps the www.yournavigation.org API 
 * (<a href="http://wiki.openstreetmap.org/wiki/YOURS#Routing_API">http://wiki.openstreetmap.org/wiki/YOURS#Routing_API</a>).  
 */
public class RoutingService {
	// Project Phase Two : TODO you need to complete the implementation of this class

	private final static String LOG_TAG = "RoutingService";

	/**
	 * Caches routes retrieved by their endpoints.  Access to this map must be synchronized on the
	 * map.
	 */
	private Map<RouteEndpoints, RouteInfo> routeCache = new HashMap<RouteEndpoints, RouteInfo>();

	/** 
	 * Client for making HTTP requests to the API of the service.
	 */
	private HttpClient client;
	private HttpGet request;
	private HttpContext handler;
	private HttpResponse response;
	private URI uri;

	public RoutingService() {
		// Create an HttpClient with the ThreadSafeClientConnManager.
		// This connection manager must be used if more than one thread will
		// be accessing the HttpClient.
		HttpParams params = new BasicHttpParams();
		HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);

		SchemeRegistry schemeRegistry = new SchemeRegistry();
		schemeRegistry.register(
				new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));

		ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(params, schemeRegistry);
		client = new DefaultHttpClient(cm, params);
		
		request = new HttpGet();
	}

	public void shutdown() {
		if (client != null) {
			client.getConnectionManager().shutdown();
		}
	}

	/**
	 * Calculate route for given start point and end point.  An internet connection must be available.
	 * See {@link getRouteFromService} for further information on route generation.
	 * 
	 * @param start The start point of the route.
	 * @param end The end point of the route.
	 * @param useCache Indicates whether the service should return a cached route, if one exists.  
	 *                 If this flag is set to true, and a cached route is not available, then the new 
	 *                 route obtained from the server will be cached.
	 * @return Information on the route calculated, including the waypoints.
	 * @throws IOException If an error occurs while retrieving the route from the server.
	 */
	public RouteInfo getRoute(LatLong start, LatLong end, boolean useCache) throws IOException {
		// DV's version (untested):
		RouteEndpoints endpoints = new RouteEndpoints(start, end);
		if (routeCache != null && useCache) { 
			return getCachedRoute(endpoints);
		}
		return getRouteFromService(endpoints); // Do we need to throw the IOException somewhere here? 

		/*		// AG's WIP:
		if (useCache){
			if (routeCache!=null){


			}
		}

		List<LatLong> latLongs = new ArrayList<LatLong>();
		latLongs.add(start);
		latLongs.add(end);
		RouteInfo routeI = new RouteInfo(latLongs);
		if (useCache){
			RouteEndpoints routeEndPts = new RouteEndpoints(start, end);
			addRouteToCache(routeEndPts, routeI);
		}
		return routeI;*/

	}

	/**
	 * Calculate route for given endpoints.  Currently, we use the www.yournavigation.org API
	 * (<a href="http://wiki.openstreetmap.org/wiki/YOURS#Routing_API">http://wiki.openstreetmap.org/wiki/YOURS#Routing_API</a>), 
	 * with result format set to geojson, vehicle set to foot and route type set to shortest (rather than fastest).  Using route 
	 * type of fastest can result in different routes between the same two points, depending on the 
	 * direction traveled.
	 * 
	 * Subclasses can override this method to connect to alternate routing services.
	 * 
	 * @param endpoints Endpoints of the route.
	 * @return Information on the route calculated, including waypoints.
	 * @throws IOException If an error occurs while retrieving the route from the server.
	 */
	private RouteInfo getRouteFromService(RouteEndpoints endpoints) throws IOException {


		// AG: (forgot to update before starting, so did this...)
		//		url = "http://www.yournavigation.org/api/1.0/gosmore.php?" +
		//				"format=geojson" +
		//				"&flat=" + endpoints.getStart().getLatitude() +
		//				"&flon=" + endpoints.getStart().getLongitude() +
		//				"&tlat=" + endpoints.getEnd().getLatitude() +
		//				"&tlon=" + endpoints.getEnd().getLongitude() +
		//				"&v=foot" +
		//				"&fast=0" +
		//				"&layer=mapnik";
		//		
		//		
		//			try {
		//				uri = new URI(url);
		//			} catch (URISyntaxException e) {
		//				System.out.println("SYNTAX ERROR IN URL");
		//			}

		// DV's WIP
		Map<String, String> pointAsString = endpointsToStrings(endpoints);
		String sLat = pointAsString.get("startLat");
		String sLong = pointAsString.get("startLong");
		String eLat = pointAsString.get("endLat");
		String eLong = pointAsString.get("endLong");


		// Seems like the URL we pass to the URI service needs the whole URL? ie add baseURL to the String uri?
		// I renamed the parameter to url just to keep it straight from the URI below
		String baseURL = "http://yours.cs.ubc.ca/yours/api/1.0/gosmore.php";

		String url = "?"              +  
				"format=geojson" + //specifies the format (kml or geojson) in which the route result is being sent back to the client. 
				"&"              +
				"flat=" + sLat   + //latitude of the starting location.
				"&"              +
				"flon=" + sLong  + //longitude of the starting location.
				"&"              +
				"tlat=" + eLat   + //latitude of the end location.
				"&"              +
				"tlon=" + eLong  + //longitude of the end location.
				"&"              +
				"v=foot"         + //the type of transport, possible options are: motorcar, bicycle or foot. 
				"&"              +
				"fast=0"         + //fast = 1 selects the fastest route, 0 the shortest route.
				"&"              +
				"layer=mapnik"   ; //determines which Gosmore instance is used to calculate the route. 
		//Provide mapnik for normal routing using car, bicycle or foot.

		try{
			uri = new URI(baseURL+	url); //not sure if this is right. how do you make a URI object? 
		} catch (URISyntaxException e) {
			System.out.println("SYNTAX ERROR IN URL");
		}

		// Also, how do we use the HttpGet class?
		// I added fields for request and handler. This method returns an HttpResponse
		// rather than a string, so I'm not sure yet either about how to use it...
		//final String JSON_DATA =
		
		request.setURI(uri);
		response = client.execute(request, handler); //make this final and static?


		return null;
	}

	private RouteInfo getCachedRoute(RouteEndpoints endpoints) {
		synchronized (routeCache) {
			return routeCache.get(endpoints);
		}
	}

	private void addRouteToCache(RouteEndpoints endpoints, RouteInfo routeInfo) {
		synchronized (routeCache) {
			routeCache.put(endpoints, routeInfo);
		}
	}

	/* Helper function (by DV)
	 * Generates a map of LatLong values as strings which are parsed from an object of RouteEndpoints.
	 * @param endpoints is an instance of RouteEndpoints
	 * @return Map<String, String> where keys are ("startLat", "startLong", "endLat", "endLong")
	 */
	private Map<String, String> endpointsToStrings(RouteEndpoints endpoints){
		Map<String, String> result = new HashMap<String, String>();

		LatLong startLatLong = endpoints.getStart();
		LatLong endLatLong = endpoints.getEnd();

		double sLat = startLatLong.getLatitude();
		double sLong = startLatLong.getLongitude();
		double eLat = endLatLong.getLatitude();
		double eLong = endLatLong.getLongitude();

		result.put("startLat", Double.toString(sLat));
		result.put("startLong", Double.toString(sLong));
		result.put("endLat", Double.toString(eLat));
		result.put("endLong", Double.toString(eLong));

		return result;
	}

}
